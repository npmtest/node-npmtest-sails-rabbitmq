{"/home/travis/build/npmtest/node-npmtest-sails-rabbitmq/test.js":"/* istanbul instrument in package npmtest_sails_rabbitmq */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sails-rabbitmq/lib.npmtest_sails_rabbitmq.js":"/* istanbul instrument in package npmtest_sails_rabbitmq */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_sails_rabbitmq = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_sails_rabbitmq = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-sails-rabbitmq/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-sails-rabbitmq && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_sails_rabbitmq */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_sails_rabbitmq\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_sails_rabbitmq.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_sails_rabbitmq.rollup.js'] =\n            local.assetsDict['/assets.npmtest_sails_rabbitmq.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_sails_rabbitmq.__dirname + '/lib.npmtest_sails_rabbitmq.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sails-rabbitmq/node_modules/sails-rabbitmq/dist/adapter.js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _handlersPersistence = require('./handlers/persistence');\n\nvar _handlersPersistence2 = _interopRequireDefault(_handlersPersistence);\n\nvar rabbit = require('rabbit.js');\nvar _ = require('lodash');\n\n/**\n * Implementation of the sails-rabbitmq Adapter\n */\nvar Adapter = {\n\n  /**\n   * Set the primary key datatype for the persistence datastore from config/rabbit.js.\n   */\n  pkFormat: _.get(global, ['sails', 'config', 'rabbitmq', 'pkFormat'], 'integer'),\n\n  /**\n   * Local connections store\n   */\n  connections: new Map(),\n\n  /**\n   * Adapter default configuration\n   */\n  defaults: {\n    url: 'amqp://localhost',\n    schema: false\n  },\n\n  /**\n   * This method runs when a model is initially registered\n   * at server-start-time.  This is the only required method.\n   *\n   * @param  {[type]}   connection [description]\n   * @param  {[type]}   collection [description]\n   * @param  {Function} cb         [description]\n   * @return {[type]}              [description]\n   */\n  registerConnection: function registerConnection(connection, collections, cb) {\n    var _this = this;\n\n    if (!connection.identity) return cb(new Error('Connection is missing an identity.'));\n    if (this.connections.get(connection.identity)) return cb(new Error('Connection is already registered.'));\n\n    var context = rabbit.createContext(connection.url);\n\n    var config = {\n      identity: connection.identity,\n      context: context,\n      models: new Map(_.pairs(collections)),\n      userSockets: new Set(),\n      sockets: {\n        publish: new Map(),\n        push: new Map()\n      },\n      persistence: connection.persistence\n    };\n    this.connections.set(connection.identity, config);\n\n    context.on('error', function (err) {\n      console.error(err);\n    });\n\n    context.once('ready', function () {\n      _this.setupConnection(connection, collections, config).then(cb)['catch'](cb);\n    });\n  },\n\n  setupConnection: function setupConnection(connection, collections, config) {\n    var _this2 = this;\n\n    return Promise.all(_.map(collections, function (model) {\n      return _this2.setupConnectionSockets(connection, model, config);\n    })).then(function () {\n      if (config.persistence) {\n        return Promise.all(_.map(collections, function (model) {\n          new _handlersPersistence2['default'](connection, model);\n        }));\n      }\n    }).then(function () {\n      return Promise.resolve();\n    });\n  },\n\n  setupConnectionSockets: function setupConnectionSockets(connection, model, config) {\n    return Promise.all([this.getPublishSocket(connection.identity, model.identity).then(function (pubSocket) {\n      config.sockets.publish.set(model.identity, pubSocket);\n    }), this.getPushSocket(connection.identity, model.identity, { name: 'persistence' }).then(function (pushSocket) {\n      config.sockets.push.set(model.identity, pushSocket);\n    })]);\n  },\n\n  /**\n   * Fired when a model is unregistered, typically when the server\n   * is killed. Useful for tearing-down remaining open connections,\n   * etc.\n   *\n   * @param  {Function} cb [description]\n   * @return {[type]}      [description]\n   */\n  teardown: function teardown(conn, cb) {\n    if (_.isFunction(conn)) {\n      cb = conn;\n      conn = null;\n    }\n\n    var connections = conn ? [conn].values() : this.connections.values();\n\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = connections[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var c = _step.value;\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = c.sockets.publish.values()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var socket = _step2.value;\n            socket.close();\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2['return']) {\n              _iterator2['return']();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n\n        var _iteratorNormalCompletion3 = true;\n        var _didIteratorError3 = false;\n        var _iteratorError3 = undefined;\n\n        try {\n          for (var _iterator3 = c.sockets.push.values()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n            var socket = _step3.value;\n            socket.close();\n          }\n        } catch (err) {\n          _didIteratorError3 = true;\n          _iteratorError3 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion3 && _iterator3['return']) {\n              _iterator3['return']();\n            }\n          } finally {\n            if (_didIteratorError3) {\n              throw _iteratorError3;\n            }\n          }\n        }\n\n        var _iteratorNormalCompletion4 = true;\n        var _didIteratorError4 = false;\n        var _iteratorError4 = undefined;\n\n        try {\n          for (var _iterator4 = c.userSockets.values()[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n            var socket = _step4.value;\n            socket.close();\n          }\n        } catch (err) {\n          _didIteratorError4 = true;\n          _iteratorError4 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion4 && _iterator4['return']) {\n              _iterator4['return']();\n            }\n          } finally {\n            if (_didIteratorError4) {\n              throw _iteratorError4;\n            }\n          }\n        }\n\n        this.connections['delete'](c.identity);\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator['return']) {\n          _iterator['return']();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    cb();\n  },\n\n  /**\n   * @override\n   */\n  create: function create(connection, collection, values, cb) {\n    this.update(connection, collection, values, values, cb);\n  },\n\n  /**\n   * @override\n   */\n  update: function update(connection, collection, criteria, values, cb) {\n    var config = this.connections.get(connection);\n    var pushSocket = this.getSocket(connection, collection, 'push');\n\n    this.getSubscribeSocket(connection, collection, criteria).then(function (subSocket) {\n      subSocket.on('data', function (data) {\n        var model = JSON.parse(data);\n        subSocket.close();\n        cb(null, model);\n      });\n\n      pushSocket.write(JSON.stringify(values), 'utf8');\n    });\n  },\n\n  /**\n   * Publish a message to an exchange. Accepts the same arguments as the \n   * update() method in the \"semantic\" interface.\n   *\n   * Exchange configuration defined in the adapter's connection config object\n   * determines how the message is handled/routed by the exchange.\n   */\n  publish: function publish(connection, collection, values, cb) {\n    var socket = this.getSocket(connection, collection, 'publish');\n    var routingKey = this.getRoutingKey(connection, collection, values);\n\n    socket.publish(routingKey, JSON.stringify(values), 'utf8');\n\n    return Promise.resolve(socket);\n  },\n\n  /**\n   * Setup and connect a PUBLISH socket for the specified model\n   */\n  getPublishSocket: function getPublishSocket(connection, collection) {\n    var config = this.connections.get(connection);\n    var context = config.context;\n    var address = this.getExchangeName(collection);\n    var socket = context.socket('PUBLISH', { routing: 'topic' });\n\n    return new Promise(function (resolve, reject) {\n      socket.connect(address, function () {\n        resolve(socket);\n      });\n    });\n  },\n\n  /**\n   * Setup and connect a SUBSCRIBE socket for the specified model\n   */\n  getSubscribeSocket: function getSubscribeSocket(connection, collection) {\n    var options = arguments[2] === undefined ? {} : arguments[2];\n\n    var config = this.connections.get(connection);\n    var context = config.context;\n    var address = this.getExchangeName(collection);\n    var routingKey = this.getRoutingKey(connection, collection, options.where);\n    var socket = context.socket('SUBSCRIBE', { routing: 'topic' });\n\n    socket.setEncoding('utf8');\n    socket.once('close', function () {\n      config.userSockets['delete'](socket);\n    });\n\n    return new Promise(function (resolve, reject) {\n      socket.connect(address, routingKey, function () {\n        config.userSockets.add(socket);\n        resolve(socket);\n      });\n    });\n  },\n\n  /**\n   * Setup and connect a PUSH socket for the specified model\n   */\n  getPushSocket: function getPushSocket(connection, collection) {\n    var options = arguments[2] === undefined ? {} : arguments[2];\n\n    var config = this.connections.get(connection);\n    var context = config.context;\n    var address = this.getQueueName(collection, options.name);\n    var socket = context.socket('PUSH');\n\n    return new Promise(function (resolve, reject) {\n      socket.connect(address, function () {\n        resolve(socket);\n      });\n    });\n  },\n\n  /**\n   * Setup and connect a WORKER socket for the specified model\n   */\n  getWorkerSocket: function getWorkerSocket(connection, collection) {\n    var options = arguments[2] === undefined ? {} : arguments[2];\n\n    var config = this.connections.get(connection);\n    var context = config.context;\n    var address = this.getQueueName(collection, options.name);\n    var socket = context.socket('WORKER');\n\n    socket.setEncoding('utf8');\n    socket.once('close', function () {\n      config.userSockets['delete'](socket);\n    });\n    return new Promise(function (resolve, reject) {\n      socket.connect(address, function () {\n        config.userSockets.add(socket);\n        resolve(socket);\n      });\n    });\n  },\n\n  /**\n   * Return an extant socket of the specific type for the specified model\n   */\n  getSocket: function getSocket(connectionId, collection, type) {\n    var connection = this.connections.get(connectionId);\n    return connection.sockets[type].get(collection);\n  },\n\n  /**\n   * Return the name of the AMQP exchange that is used by the specified model\n   */\n  getExchangeName: function getExchangeName(model) {\n    return 'sails.models.' + model;\n  },\n\n  /**\n   * Return the name of the AMQP queue that is used by the specified model\n   * in conjuction with a particular type of work(er)\n   */\n  getQueueName: function getQueueName(model, name) {\n    if (_.isUndefined(name)) {\n      throw new Error('name cannot be undefined in getQueueName');\n    }\n    return 'sails.models.' + model + '.' + name;\n  },\n\n  /**\n   * Return AMQP routing key for a given Model instance\n   * @return dot-delimited string of model attributes which constitutes the\n   *    queue routing key\n   */\n  getRoutingKey: function getRoutingKey(connection, collection, values) {\n    var config = this.connections.get(connection);\n    var Model = config.models.get(collection);\n    if (_.isUndefined(values)) {\n      return '#';\n    } else if (!_.isArray(Model.routingKey)) {\n      throw new Error('The model ' + Model.identity + ' must define a routingKey\\n        in order to be used with the Waterline pubsub interface');\n    } else {\n      return this.parseRoutingKey(Model.routingKey, values);\n    }\n  },\n\n  /**\n   * @return a rabbitmq routing key derived from a list of model attributes\n   */\n  parseRoutingKey: function parseRoutingKey(routingKey, values) {\n    return routingKey.map(function (attribute) {\n      return values[attribute];\n    }).join('.');\n  },\n\n  /**\n   * Return a model's connection that will be used for persistence, if it\n   * exists.\n   */\n  getPersistenceConnection: function getPersistenceConnection(connection, collection) {\n    var config = this.connections.get(connection);\n    var Model = config.models.get(collection);\n\n    var persistenceConnections = _.without(Model.connection, connection);\n\n    return persistenceConnections[0];\n  }\n};\n\n_.bindAll(Adapter);\n\nexports['default'] = Adapter;\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-sails-rabbitmq/node_modules/sails-rabbitmq/dist/handlers/persistence.js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar rabbit = require('rabbit.js');\nvar _ = require('lodash');\nvar Cast = require('waterline/lib/waterline/core/typecast');\n\nvar PersistenceHandler = (function () {\n\n  /**\n   * Setup the persistence handler.\n   *\n   * note: this adapter should be able to function in the absence of\n   * sails. However, we need to wait for the persistence adapter to load before\n   * trying to persist payloads from the messaging queue. We check for the\n   * existence of global.sails, and if it exists, wait for the orm hook to \n   * finish loading.\n   *\n   * corollary: in some ways, this trades one potential race condition for\n   * another. The app might try to send messages to queues that aren't yet bound\n   * to a persistence handler. This is an inconvenience, but not a dealbreaker.\n   * Sending a message to a queue and having it stuck there is much better than\n   * pulling a message off the queue and not be able to persist it anywhere.\n   */\n\n  function PersistenceHandler(connection, model) {\n    var _this = this;\n\n    _classCallCheck(this, PersistenceHandler);\n\n    this.connection = connection;\n    this.model = model;\n\n    if (!this.isPersistentModel()) {\n      throw new Error('model ' + this.model.identity + ' does not support persistence');\n    }\n\n    return this.model.getWorkerSocket({ name: 'persistence' }).then(function (socket) {\n      _this.socket = socket;\n\n      if (!global.sails) {\n        console.log('sails-rabbitmq: binding persistence handlers immediately...');\n        return _this.bindPersistenceHandler();\n      }\n\n      console.log('sails-rabbitmq: waiting for orm hook to load before binding persistence handlers...');\n      global.sails.after('hook:orm:loaded', function () {\n        _this.bindPersistenceHandler();\n      });\n    })['catch'](function (err) {\n      console.error(err);\n    });\n  }\n\n  _createClass(PersistenceHandler, [{\n    key: 'teardown',\n\n    /**\n     * Release all sockets\n     */\n    value: function teardown() {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this2.socket.once('close', function () {\n          resolve();\n        });\n        _this2.socket.close();\n      });\n    }\n  }, {\n    key: 'bindPersistenceHandler',\n    value: function bindPersistenceHandler() {\n      var _this3 = this;\n\n      var connectionId = this.model.getPersistenceConnection();\n      var persistenceConnection = this.model.connections[connectionId]._adapter;\n\n      this.socket.on('data', function (data) {\n        var values = JSON.parse(data);\n        var typecast = new Cast();\n        typecast.initialize(_this3.model.attributes);\n        values = typecast.run(values);\n        var pk = values[_this3.model.primaryKey];\n\n        if (pk) {\n          persistenceConnection.update(connectionId, _this3.model.identity, { where: { id: pk } }, values, function (err, model) {\n            if (!err) {\n              _this3.model.publish(model);\n            }\n            _this3.socket.ack();\n          });\n        } else {\n          persistenceConnection.create(connectionId, _this3.model.identity, values, function (err, model) {\n            if (!err) {\n              _this3.model.publish(model);\n            }\n            _this3.socket.ack();\n          });\n        }\n      });\n    }\n  }, {\n    key: 'isPersistentModel',\n\n    /**\n     * Return true if the specified model supports persistence; false otherwise\n     */\n    value: function isPersistentModel() {\n      var connectionCount = this.model.connection.length;\n\n      if (connectionCount > 2) {\n        console.error('Persistent connection is ambiguous for model ' + this.model.identity);\n      }\n\n      return connectionCount === 2;\n    }\n  }]);\n\n  return PersistenceHandler;\n})();\n\nexports['default'] = PersistenceHandler;\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-sails-rabbitmq/node_modules/sails-rabbitmq/gulpfile.js":"var gulp = require('gulp');\nvar babel = require('gulp-babel');\n\ngulp.task('build', function () {\n  return gulp.src([ 'lib/**' ])\n    .pipe(babel())\n    .pipe(gulp.dest('dist'));\n});\n","/home/travis/build/npmtest/node-npmtest-sails-rabbitmq/node_modules/sails-rabbitmq/lib/adapter.js":"const rabbit = require('rabbit.js')\nconst _ = require('lodash')\n\nimport PersistenceHandler from './handlers/persistence'\n\n/**\n * Implementation of the sails-rabbitmq Adapter\n */\nconst Adapter = {\n\n\n  /**\n   * Set the primary key datatype for the persistence datastore from config/rabbit.js.\n   */\n  pkFormat: _.get(global, [ 'sails', 'config', 'rabbitmq', 'pkFormat'], 'integer'),\n\n  /**\n   * Local connections store\n   */\n  connections: new Map(),\n\n  /**\n   * Adapter default configuration\n   */\n  defaults: {\n    url: 'amqp://localhost',\n    schema: false\n  },\n\n  /**\n   * This method runs when a model is initially registered\n   * at server-start-time.  This is the only required method.\n   *\n   * @param  {[type]}   connection [description]\n   * @param  {[type]}   collection [description]\n   * @param  {Function} cb         [description]\n   * @return {[type]}              [description]\n   */\n  registerConnection (connection, collections, cb) {\n    if (!connection.identity) return cb(new Error('Connection is missing an identity.'))\n    if (this.connections.get(connection.identity)) return cb(new Error('Connection is already registered.'))\n\n    let context = rabbit.createContext(connection.url)\n\n    let config = {\n      identity: connection.identity,\n      context: context,\n      models: new Map(_.pairs(collections)),\n      userSockets: new Set(),\n      sockets: {\n        publish: new Map(),\n        push: new Map()\n      },\n      persistence: connection.persistence\n    }\n    this.connections.set(connection.identity, config)\n\n    context.on('error', err => {\n      console.error(err)\n    })\n\n    context.once('ready', () => {\n      this.setupConnection(connection, collections, config)\n        .then(cb)\n        .catch(cb)\n    })\n  },\n\n  setupConnection (connection, collections, config) {\n\n    return Promise\n      .all(_.map(collections, model => {\n        return this.setupConnectionSockets(connection, model, config)\n      }))\n      .then(() => {\n        if (config.persistence) {\n          return Promise.all(_.map(collections, model => {\n            new PersistenceHandler(connection, model)\n          }))\n        }\n      })\n      .then(() => {\n        return Promise.resolve()\n      })\n  },\n\n  setupConnectionSockets (connection, model, config) {\n    return Promise.all([\n\n      this.getPublishSocket(connection.identity, model.identity)\n        .then(pubSocket => {\n          config.sockets.publish.set(model.identity, pubSocket)\n        }),\n\n      this.getPushSocket(connection.identity, model.identity, { name: 'persistence' })\n        .then(pushSocket => {\n          config.sockets.push.set(model.identity, pushSocket)\n        })\n    ])\n  },\n\n  /**\n   * Fired when a model is unregistered, typically when the server\n   * is killed. Useful for tearing-down remaining open connections,\n   * etc.\n   *\n   * @param  {Function} cb [description]\n   * @return {[type]}      [description]\n   */\n  teardown (conn, cb) {\n    if (_.isFunction(conn)) {\n      cb = conn\n      conn = null\n    }\n    \n    let connections = conn ? [ conn ].values() : this.connections.values()\n\n    for (let c of connections) {\n      for (let socket of c.sockets.publish.values()) socket.close()\n      for (let socket of c.sockets.push.values()) socket.close()\n      for (let socket of c.userSockets.values()) socket.close()\n\n      this.connections.delete(c.identity)\n    }\n    cb()\n  },\n\n  /**\n   * @override\n   */\n  create (connection, collection, values, cb) {\n    this.update(connection, collection, values, values, cb)\n  },\n\n  /**\n   * @override\n   */\n  update (connection, collection, criteria, values, cb) {\n    let config = this.connections.get(connection)\n    let pushSocket = this.getSocket(connection, collection, 'push')\n\n    this.getSubscribeSocket(connection, collection, criteria)\n      .then(subSocket => {\n        subSocket.on('data', data => {\n          let model = JSON.parse(data)\n          subSocket.close()\n          cb(null, model)\n        })\n\n        pushSocket.write(JSON.stringify(values), 'utf8')\n      })\n  },\n\n  /**\n   * Publish a message to an exchange. Accepts the same arguments as the \n   * update() method in the \"semantic\" interface.\n   *\n   * Exchange configuration defined in the adapter's connection config object\n   * determines how the message is handled/routed by the exchange.\n   */\n  publish (connection, collection, values, cb) {\n    let socket = this.getSocket(connection, collection, 'publish')\n    let routingKey = this.getRoutingKey(connection, collection, values)\n\n    socket.publish(routingKey, JSON.stringify(values), 'utf8')\n\n    return Promise.resolve(socket)\n  },\n\n  /**\n   * Setup and connect a PUBLISH socket for the specified model\n   */\n  getPublishSocket (connection, collection) {\n    let config = this.connections.get(connection)\n    let context = config.context\n    let address = this.getExchangeName(collection)\n    let socket = context.socket('PUBLISH', { routing: 'topic' })\n\n    return new Promise((resolve, reject) => {\n      socket.connect(address, () => {\n        resolve(socket)\n      })\n    })\n  },\n\n  /**\n   * Setup and connect a SUBSCRIBE socket for the specified model\n   */\n  getSubscribeSocket (connection, collection, options = { }) {\n    let config = this.connections.get(connection)\n    let context = config.context\n    let address = this.getExchangeName(collection)\n    let routingKey = this.getRoutingKey(connection, collection, options.where)\n    let socket = context.socket('SUBSCRIBE', { routing: 'topic' })\n\n    socket.setEncoding('utf8')\n    socket.once('close', () => {\n      config.userSockets.delete(socket)\n    })\n\n    return new Promise((resolve, reject) => {\n      socket.connect(address, routingKey, () => {\n        config.userSockets.add(socket)\n        resolve(socket)\n      })\n    })\n  },\n\n  /**\n   * Setup and connect a PUSH socket for the specified model\n   */\n  getPushSocket (connection, collection, options = { }) {\n    let config = this.connections.get(connection)\n    let context = config.context\n    let address = this.getQueueName(collection, options.name)\n    let socket = context.socket('PUSH')\n\n    return new Promise((resolve, reject) => {\n      socket.connect(address, () => {\n        resolve(socket)\n      })\n    })\n  },\n\n  /**\n   * Setup and connect a WORKER socket for the specified model\n   */\n  getWorkerSocket (connection, collection, options = { }) {\n    let config = this.connections.get(connection)\n    let context = config.context\n    let address = this.getQueueName(collection, options.name)\n    let socket = context.socket('WORKER')\n\n    socket.setEncoding('utf8')\n    socket.once('close', () => {\n      config.userSockets.delete(socket)\n    })\n    return new Promise((resolve, reject) => {\n      socket.connect(address, () => {\n        config.userSockets.add(socket)\n        resolve(socket)\n      })\n    })\n  },\n\n  /**\n   * Return an extant socket of the specific type for the specified model\n   */\n  getSocket (connectionId, collection, type) {\n    let connection = this.connections.get(connectionId)\n    return connection.sockets[type].get(collection)\n  },\n\n  /**\n   * Return the name of the AMQP exchange that is used by the specified model\n   */\n  getExchangeName (model) {\n    return `sails.models.${model}`\n  },\n\n  /**\n   * Return the name of the AMQP queue that is used by the specified model\n   * in conjuction with a particular type of work(er)\n   */\n  getQueueName (model, name) {\n    if (_.isUndefined(name)) {\n      throw new Error('name cannot be undefined in getQueueName')\n    }\n    return `sails.models.${model}.${name}`\n  },\n\n  /**\n   * Return AMQP routing key for a given Model instance\n   * @return dot-delimited string of model attributes which constitutes the\n   *    queue routing key\n   */\n  getRoutingKey (connection, collection, values) {\n    let config = this.connections.get(connection)\n    let Model = config.models.get(collection)\n    if (_.isUndefined(values)) {\n      return '#'\n    }\n    else if (!_.isArray(Model.routingKey)) {\n      throw new Error(\n        `The model ${Model.identity} must define a routingKey\n        in order to be used with the Waterline pubsub interface`\n      )\n    }\n    else {\n      return this.parseRoutingKey(Model.routingKey, values)\n    }\n  },\n\n  /**\n   * @return a rabbitmq routing key derived from a list of model attributes\n   */\n  parseRoutingKey (routingKey, values) {\n    return routingKey.map(attribute => { return values[attribute] }).join('.')\n  },\n\n  /**\n   * Return a model's connection that will be used for persistence, if it\n   * exists.\n   */\n  getPersistenceConnection (connection, collection) {\n    let config = this.connections.get(connection)\n    let Model = config.models.get(collection)\n\n    let persistenceConnections = _.without(Model.connection, connection)\n\n    return persistenceConnections[0]\n  }\n}\n\n_.bindAll(Adapter)\n\nexport default Adapter\n","/home/travis/build/npmtest/node-npmtest-sails-rabbitmq/node_modules/sails-rabbitmq/lib/handlers/persistence.js":"const rabbit = require('rabbit.js')\nconst _ = require('lodash')\nconst Cast = require('waterline/lib/waterline/core/typecast');\n\nexport default class PersistenceHandler {\n\n  /**\n   * Setup the persistence handler.\n   *\n   * note: this adapter should be able to function in the absence of\n   * sails. However, we need to wait for the persistence adapter to load before\n   * trying to persist payloads from the messaging queue. We check for the\n   * existence of global.sails, and if it exists, wait for the orm hook to \n   * finish loading.\n   *\n   * corollary: in some ways, this trades one potential race condition for\n   * another. The app might try to send messages to queues that aren't yet bound\n   * to a persistence handler. This is an inconvenience, but not a dealbreaker.\n   * Sending a message to a queue and having it stuck there is much better than\n   * pulling a message off the queue and not be able to persist it anywhere.\n   */\n  constructor (connection, model) {\n    this.connection = connection\n    this.model = model\n\n    if (!this.isPersistentModel()) {\n      throw new Error(`model ${this.model.identity} does not support persistence`)\n    }\n\n    return this.model.getWorkerSocket({ name: 'persistence' })\n      .then(socket => {\n        this.socket = socket\n\n        if (!global.sails) {\n          console.log('sails-rabbitmq: binding persistence handlers immediately...')\n          return this.bindPersistenceHandler()\n        }\n\n        console.log('sails-rabbitmq: waiting for orm hook to load before binding persistence handlers...')\n        global.sails.after('hook:orm:loaded', () => { this.bindPersistenceHandler() })\n      })\n      .catch(err => {\n        console.error(err)\n      })\n  }\n\n  /**\n   * Release all sockets\n   */\n  teardown () {\n    return new Promise((resolve, reject) => {\n      this.socket.once('close', () => {\n        resolve()\n      })\n      this.socket.close()\n    })\n  }\n\n  bindPersistenceHandler () {\n    let connectionId = this.model.getPersistenceConnection()\n    let persistenceConnection = this.model.connections[connectionId]._adapter\n\n    this.socket.on('data', (data) => {\n      let values = JSON.parse(data)\n      let typecast = new Cast();\n      typecast.initialize(this.model.attributes);\n      values = typecast.run(values);\n      let pk = values[this.model.primaryKey]\n\n      if (pk) {\n        persistenceConnection.update(connectionId, this.model.identity, {where:{id: pk}}, values, (err, model) => {\n          if (!err) {\n            this.model.publish(model)\n          }\n          this.socket.ack()\n        })\n      }\n      else {\n        persistenceConnection.create(connectionId, this.model.identity, values, (err, model) => {\n          if (!err) {\n            this.model.publish(model)\n          }\n          this.socket.ack()\n        })\n      }\n    })\n  }\n\n  /**\n   * Return true if the specified model supports persistence; false otherwise\n   */\n  isPersistentModel () {\n    let connectionCount = this.model.connection.length\n\n    if (connectionCount > 2) {\n      console.error(`Persistent connection is ambiguous for model ${this.model.identity}`)\n    }\n\n    return connectionCount === 2\n  }\n\n}\n"}